/**
 * @file GameDataFile.h
 * @brief Holds data for an individual save file.
 */

#pragma once

#include "al/iuse/IUseSceneObjHolder.h"
#include "game/GameData/GameProgressData.h"
#include "game/Player/PlayerHitPointData.h"
#include "game/StageScene/ChangeStageInfo.h"
#include <sead/math/seadVector.h>
#include <sead/prim/seadSafeString.h>
#include <sead/container/seadPtrArray.h>
#include <sead/stream/seadStream.h>
#include <sead/time/seadDateTime.h>
#include "types.h"


namespace al {
class ByamlWriter;
}
class GameDataHolder;
class ChangeStageInfo;
class ShineInfo;
class UniqObjInfo;
class SphinxQuizData;
class TimeBalloonSaveData;
class WorldWarpTalkData;
class VisitStageData;
class MoonRockData;
class BossSaveData;
class AchievementSaveData;
class SearchAmiiboDataTable;
class NetworkUploadFlag;
class SequenceDemoSkipData;
class HintPhotoData;
class ShopTalkData;
class RaceRecord;
class CollectBgm;
class QuestInfo;

enum SessionMusicianType {
    Drums = 0,
    Bass,
    Guitar,
    Trumpet,
    Invalid
};

class ShopItem {
public:
    class ItemInfo;
};

class GameDataFile {
public:
    class CoinCollectInfo {

    };

    class HintInfo {
    public:
        sead::FixedSafeString<128> mStageName;
        sead::FixedSafeString<128> mObjId;
        const char* sVar2;
        sead::FixedSafeString<64> mObjectName;
        sead::Vector3f mHintTrans;
        sead::Vector3f mTrans;
        unsigned char gap4[0x20];
        int mMainScenarioNo;
        int mWorldId;
        bool mIsMoonRock;
        bool mIsGet;
        bool mIsAchievementShine;
        bool mIsGrand;
        bool mIsShopShine;
        int iVar2;
        int mHintStatus;
        int mStatus;
        sead::DateTime mGetTime;
        int mUniqueId;
        sead::FixedSafeString<32> mOptionalId;
        unsigned int mProgressBitFlag;
        bool mDisableHintById;
        bool bVar3;
    };

    enum CountType {

    };

    GameDataFile(GameDataHolder*);

    void addCoin(int);
    void addCoinCollect(al::PlacementId const*);
    void addGrowFlowerGrowLevel(al::PlacementId const*, unsigned int);
    void addHackDictionary(const char*);
    void addKey(int);
    void addOpenDoorLockNum(int);
    void addPayShine(int);
    void addPayShineCurrentAll();
    void addPlayerJumpCount();
    void addPlayerThrowCapCount();
    void addPlayTime(int, al::IUseSceneObjHolder const*);
    void addSessionMember(SessionMusicianType const&);
    void answerCorrectSphinxQuiz();
    void answerCorrectSphinxQuizAll();
    void buyDefaultItem();
    void buyItem(ShopItem::ItemInfo const*, bool);
    void buyItemAll();
    int calcAllShineNumByObjectNameOrOptionalId(const char*) const;
    int calcCheckpointIndexInScenario(int) const;
    int calcGetCheckpointNum() const;
    int calcGetShineNumByObjectNameOrOptionalId(const char*, CountType) const;
    int calcGetShineNumByObjectNameWithWorldId(const char*, int) const;
    int calcGetShineByStageName(const char*) const;
    int calcHaveCapNum() const;
    int calcHaveClothNum() const;    
    int calcHaveGiftNum() const;
    int calcHaveStickerNum() const;
    int calcHintMoonRockNum() const;
    sead::Vector3f* calcHintMoonRockTrans(int) const;   
    sead::Vector3f* calcHintTrans(int) const;
    sead::Vector3f* calcHintTransMostEasy() const; 
    bool calcIsGetMainShineAll(al::IUseSceneObjHolder const*) const;
    bool calcIsGetShineAllInWorld(int) const;
    int calcLinkedShineNum(al::ActorInitInfo const&) const;
    int calcMiniGameNum() const;
    int calcNextScenarioNo() const;
    int calcRestHintNum() const;
    int calcRestShineInStageWithWorldProgress(const char*) const;
    void calcShineIndexTableNameAvailable(int*, int*, int);
    void calcShineIndexTableNameUnlockable(int* table, int* count, int worldId);
    int calcShineNumInOneShine(int, int) const;
    int calcShopNum() const;
    int calcWorldWarpHoleThroughNum() const;
    void changeNextSceneByGotCheckpoint(int);
    void changeNextSceneByHome();
    void changeNextSceneByWarp();
    void changeNextStage(ChangeStageInfo const*, int);
    void changeNextStageWithDemoWorldWarp(const char*);
    void changeNextStageWithWorldWarpHole(const char*);
    void changeWipeType(const char*);
    bool checkAchievementShine(int, int) const;
    bool checkGotShine(const char*) const;
    bool checkIsHomeStage(const char*) const;
    void clearStartId();
    void disableHintById(int);
    void enableHintById(int);
    void endStage();
    void enteredStage();
    const char* findGrowFlowerPotIdFromSeedId(al::PlacementId const*);
    HintInfo* findHint(int) const;
    HintInfo* findHintInfoMostEasy() const;
    HintInfo* findHintMoonRock(int) const;
    RaceRecord* findRaceRecord(const char*) const;
    HintInfo* findShine(int, int) const;
    int findUnlockShineNumCurrentWorld(bool*) const;
    void generateSaveDataIdForPrepo();
    void generateSaveDataIdForPrepoForWrite();
    void getAchievement(const char*);
    int getCheckpointNumMaxInWorld() const;
    sead::Vector3f* getCheckpointTransInWorld(const char*) const;
    int getCoinCollectGotNum() const;
    int getCoinCollectGotNum(int) const;
    int getCoinCollectNum() const;
    CollectBgm* getCollectBgmByIndex(int) const;
    int getCollectBgmMaxNum() const;
    int getCollectedBgmNum() const;
    int getGrowFlowerGrowLevel(al::PlacementId const*) const;
    ulong getGrowFlowerTime(al::PlacementId const*) const;
    int getKeyNum() const;
    ulong getLastUpdateTime() const;
    int getMainScenarioNo(int) const;
    int getMainScenarioNoCurrent() const;
    const char* getMiniGameName(int) const;
    int getMiniGameNumMax() const;
    sead::Vector3f* getMiniGameTrans(int) const;
    int getPayShineNum(int) const;
    PlayerHitPointData* getPlayerHitPointData() const;
    int getPlayerJumpCount() const;
    const char* getPlayerStartId() const;
    int getPlayerThrowCapCount() const;
    ulong getPlayTimeTotal() const;
    sead::Vector3f* getPoetterTrans() const;
    int getRaceLostCount(int) const;
    int getScenarioNo(int) const;
    int getScenarioNo() const;
    int getScenarioNoPlacement() const;
    int getShineNum() const;
    int getShineNum(int) const;
    int getShopNpcIconNumMax() const;
    sead::Vector3f* getShopNpcTrans(int) const;
    const char* getStageNameCurrent() const;
    const char* getStageNameNext() const;
    int getStartShineNextIndex() const;
    sead::Vector3f* getTimeBalloonNpcTrans() const;
    int getTokimekiMayorNpcFavorabilityRating() const;
    int getTotalPayShineNum() const;
    int getTotalShineNum() const;
    int getTotalShopShineNum() const;
    int getWorldTotalShineNum(int) const;
    int getWorldTotalShineNumMax(int) const;
    const char* getWorldTravelingStatus() const;
    int getWorldWarpHoleThroughNumMax() const;
    void incrementRaceLoseCount(int);
    void initializeCheckpointTable();
    void initializeCoinCollectList();
    void initializeData();
    void initializeHintList();
    bool isAlreadyGoWorld(int) const;
    bool isAlreadyShowExplainCheckpointFlag() const;
    bool isAnswerCorrectSphinxQuiz(int) const;
    bool isAnswerCorrectSphinxQuizAll(int) const;
    bool isBuyItem(ShopItem::ItemInfo const*) const;
    bool isBuyItem(const char*, sead::FixedSafeString<64> const*) const;
    bool isClearWorldMainScenario(int) const;
    bool isCollectBgm(const char*, const char*) const;
    bool isEmpty() const;
    bool isEnableOpenMoonRock(int) const;
    bool isEnableUnlockHint() const;
    bool isExistInHackDictionary(const char*) const;
    bool isExistJango() const;
    bool isExistPoetter() const;
    bool isExistSessionMember(SessionMusicianType const&) const;
    bool isExistTimeBalloonNpc() const;
    bool isFirstNetwork() const;
    bool isFirstTimeNextWorld() const;
    bool isFirstWorldTravelingStatus() const;
    bool isFlagOnTalkMessageInfo(int) const;
    bool isGameClear() const;
    bool isGotCheckpoint(al::PlacementId*) const;
    bool isGotCheckpointInWorld(int) const;
    bool isGotCoinCollect(al::PlacementId const*) const;
    bool isGoToCeremonyFromInsideHomeShip() const;
    bool isGotShine(ShineInfo const*) const;
    bool isGotShine(int) const;
    bool isGotShine(int, int) const;
    bool isKidsMode() const;
    bool isLatestGetMainShine(ShineInfo const*) const;
    bool isMainShine(int) const;
    bool isNextMainShine(QuestInfo const*) const;
    bool isNextMainShine(int) const;
    bool isOpenMoonRock(int) const;
    bool isOpenShineName(int, int) const;
    bool isPayCoinToSphinx() const;
    bool isPayShineAllInAllWorld() const;
    bool isPlayDemoPlayerDownForBattleKoopaAfter() const;
    bool isPlayScenarioCamera(QuestInfo const*) const;
    bool isRaceStart() const;
    bool isShopSellout(int) const;
    bool isStartedObj(al::PlacementId const*, const char*) const;
    bool isStartedObj(const char*, const char*) const;
    bool isStartWorldTravelingPeach() const;
    bool isTalkAlreadyLocalLanguage() const;
    bool isTalkCollectBgmNpc() const;
    bool isTalkKakku() const;
    bool isTalkWorldTravelingPeach() const;
    bool isUnlockAchievementShineName() const;
    bool isUnlockedWorld(int) const;
    bool isUsedGrowFlowerSeed(al::PlacementId const*) const;
    bool isUseMissRestartInfo() const;
    void missAndRestartStage() const;
    void noFirstNetwork();
    void noPlayDemoWorldWarp();
    void payCoinToSphinx();
    bool readFromStream(sead::ReadStream*, unsigned char*);
    void registerCheckpointTrans(al::PlacementId const*, sead::Vector3f const&);
    void registerShineInfo(ShineInfo const*, sead::Vector3f const&);
    void resetHintTrans(int);
    void resetMapIcon();
    void resetSaveDataIdForPrepoForWrite();
    void resetTempData();
    void restartStage();
    void returnPrevStage();
    void saveWorldTravelingStatus(const char*);
    void setActivateHome();
    void setAmiiboNpcTrans(sead::Vector3f const&);
    void setCheckpointId(al::PlacementId const*);
    void setFlagOnTalkMessageInfo(int);
    void setGameClear();
    void setGotShine(ShineInfo const*);
    void setGotShine(int);
    void setGotShine(HintInfo const*);
    void setGrowFlowerTime(al::PlacementId const*, al::PlacementId const*, unsigned long);
    void setGrowFlowerTime(al::PlacementId const*, unsigned long);
    void setHintTrans(int, sead::Vector3f const&);
    void setJumpingRopeBestCount(int);
    void setKidsMode(bool);
    void setMainScenarioNo(int);
    void setMiniGameInfo(sead::Vector3f const&, const char*);
    void setMissRestartInfo(al::PlacementInfo const&);
    void setMoonRockTrans(sead::Vector3f const&);
    void setOriginalHintTrans(int);
    void setPoetterTrans(sead::Vector3f const&);
    void setRestartPointId(al::PlacementId const*);
    void setSaveObjS32(al::PlacementId const*, int);
    void setShopNpcTrans(sead::Vector3f const&, const char*, int);
    void setStartedObj(al::PlacementId const*);
    void setStartShine(ShineInfo const*);
    void setTimeBalloonNpcTrans(sead::Vector3f const&);
    void setTokimekiMayorNpcFavorabilityRating(int);
    void setUpdateJumpingRopeScoreFlag();
    void setUpdateVolleyballScoreFlag();
    void setVolleyballBestCount(int);
    void showExplainCheckpointFlag();
    void startDemoStage(const char*);
    void startRaceManRace();
    void startStage(const char*, int);
    void startWorldTravelingPeach();
    void startYukimaruRace();
    void startYukimaruRaceTutorial();
    void talkCollectBgmNpc();
    void talkKakku();
    void talkLocalLanguage();
    void talkWorldTravelingPeach();
    bool tryFindAndInitShineInfoByOptionalId(ShineInfo*, const char*);
    int tryFindCoinCollectIndexByUniqueId(int) const;
    CoinCollectInfo* tryFindCoinCollectInfo(const char*, const char*) const;
    const char* tryFindExistCoinCollectStageName(int) const;
    sead::FixedSafeString<64>* tryFindItemList(ShopItem::ItemInfo const*) const;
    int tryFindLinkedShineIndex(al::ActorInitInfo const&, al::IUseSceneObjHolder const*) const;
    int tryFindLinkedShineIndex(al::ActorInitInfo const&, int, al::IUseSceneObjHolder const*) const;
    int tryFindLinkedShineIndexByLinkName(al::IUseSceneObjHolder const*, al::ActorInitInfo const*, const char*) const;
    HintInfo* tryFindNextMainScenarioInfo() const;
    UniqObjInfo* tryFindSaveObj32(al::PlacementId const*);
    int tryFindShineIndex(al::ActorInitInfo const&) const;
    int tryFindShineIndex(const char*, const char*) const;
    int tryFindShineIndexByUniqueId(int) const;
    int tryFindUniqueId(ShineInfo const*) const;
    bool tryGetNextMainScenarioLabel(sead::BufferedSafeString*, sead::BufferedSafeString*) const;
    bool tryGetNextMainScenarioPos(sead::Vector3f*) const;
    const char* tryGetRestartPointIdString() const;
    const char* tryGetStageNameCurrent() const;
    bool tryReadByamlData(unsigned char const*);
    bool tryReadByamlDataFromStream(sead::ReadStream*, unsigned char*, int);
    bool trySetCollectBgm(const char*, const char*);
    bool tryUnlockShineName(int, int);
    bool tryWriteByByaml(sead::WriteStream*, sead::Heap*) const;
    bool tryWriteByByaml(al::ByamlWriter*) const;
    void unlockAchivementShineName();
    void unlockHint();
    void unlockHintAddByMoonRock();
    void unlockHintAmiibo();
    void unlockHintImpl();
    void unlockWorld(int);
    void updateSaveInfoForDisp();
    void updateSaveTime();
    void updateSaveTimeForDisp();
    void updateWorldMapIndex();
    void updateWorldWarpIndex();
    void useCoinCollect(int);
    void wearCap(const char*);
    void wearCostume(const char*);
    void wearDefault();
    void winRace();
    void writeToStream(sead::WriteStream*, sead::Heap*) const;


    ShineInfo* mShineInfo1;
    void* gap1;
    ShineInfo* mLatestGetShineInfo;
    int* mShopShine;
    int* mQuest;
    int iVar2;
    sead::FixedSafeString<128> sVar1;
    sead::FixedSafeString<128> sVar2;
    sead::FixedSafeString<128> sVar3;
    sead::FixedSafeString<128> mCheckpointName;
    sead::FixedSafeString<128> mWorldStageName;
    sead::FixedSafeString<128> mStageNameCurrent;
    sead::FixedSafeString<128> mStageNamePrevious;
    bool bVar1;
    bool bVar2;
    bool* mWorldWarpHoleThrough;
    sead::DateTime mLastUpdateTime;
    sead::DateTime mSaveTime;
    unsigned char gap9[0x10];
    UniqObjInfo** uVar1;
    sead::FixedSafeString<128> sVar6;
    unsigned char gap10[0x18];
    void* gap11;
    unsigned char gap12[0x60];
    int* mPayShineNum;
    bool mIsPayShineAllInAllWorld;
    int mKeyNum;
    int mOpenDoorLockNum;
    UniqObjInfo** uVar2;
    UniqObjInfo** uVar3;
    sead::FixedSafeString<128>* mPlantedSeeds;
    int mCoinNum;
    int mTotalCoinNum;
    int mPlayerJumpCount;
    int mPlayerThrowCapCount;
    int* mUseCoinCollectNum;
    int* gap13;
    bool mIsPlayDemoOpening;
    bool mIsEnableCap;
    bool bVar3;
    bool* mSessionMemberNum;
    int mSessionEventProgress;
    bool mIsPayCoinToSphinx; // jaxi
    SphinxQuizData* mSphinxQuizData;
    bool* mTalkLocalLanguage;
    bool mIsHintNpcFirstTalk;
    bool mIsKinopioBrigadeNpcFirstTalk;
    int mCapStatusForJango;
    int iVar9;
    int mJangoCount;
    TimeBalloonSaveData* mTimeBalloonSaveData;
    sead::FixedSafeString<64> mWorldTravelingStatus;
    bool mIsStartWorldTravelingPeach;
    bool mIsPlayAlreadyWorldWarp;
    bool mIsTalkFirstAmiiboNpc;
    bool mIsUnlockAchievement;
    WorldWarpTalkData* mWorldWarpTalkData;
    VisitStageData* mVisitStageData;
    GameProgressData *mGameProgressData;
    MoonRockData* mMoonRockData;
    BossSaveData* mBossSaveData;
    AchievementSaveData* mAchievementSaveData;
    SearchAmiiboDataTable* mSearchAmiiboDataTable;
    NetworkUploadFlag* mNetworkUploadFlag;
    SequenceDemoSkipData* mSequenceDemoSkipData;
    HintPhotoData* mHintPhotoData;
    ulong mPlayTimeTotal;
    sead::SafeString* psVar1; // bought outfits/caps
    sead::SafeString* psVar2; // bought caps/outfits
    sead::SafeString* mBoughtStickers;
    sead::SafeString* mBoughtSouvenirs;
    sead::FixedSafeString<64> mCurrentClothName;
    sead::FixedSafeString<64> mCurrentCapName;
    bool mIsCostumeRandom;
    bool mIsCapRandom;
    void* gap17;
    bool mIsRideSphinx;
    bool mIsRideMotorcycle;
    int* mScenarioNo;
    sead::PtrArray<RaceRecord> mRaceRecords;
    int iVar3;
    int iVar4;
    int mJumpingRopeBestCount;
    int iVar1;
    bool mIsExistRecordJumpingRope;
    int mVolleyballBestCount;
    int mVolleyballDayCount;
    bool mIsExistRecordVolleyball;
    bool bVar28;
    int mNextWorldId;
    int mPrevWorldId;
    bool mIsPlayDemoPlayerDownForBattleKoopaAfter;
    void* gap19;
    bool mIsKidsMode;
    unsigned char gap20[0x7];
    sead::PtrArrayImpl arr4;
    bool mIsTalkKakku;
    bool mIsTalkWorldTravelingPeach;
    bool mIsTalkCollectBgmNpc;
    int mTokimekiMayorNpcFavorabilityRating;
    bool mFirstNetwork;
    GameDataHolder* mDataHolder;
    int* mShineNum;
    PlayerHitPointData* mHitPointData;
    sead::FixedSafeString<128> mStageNameNext;
    bool mIsStageHakoniwa;
    bool bVar5;
    int iVar10;
    sead::FixedSafeString<128> sVar9;
    HintInfo (*mShineList)[1024];
    sead::PtrArrayImpl arr2;
    int iVar5;
    int** ppiVar1;
    sead::PtrArrayImpl arr3;
    int iVar6;
    int iVar7;
    sead::SafeString sVar10;
    int mWorldId;
    int mWorldId2;  // maybe wrong
    int iVar8;
    bool bVar6;
    bool bVar7;
    bool bVar23;
    void* gap24;
    bool bVar8;
    bool bVar9;
    bool bVar10;
    int* mShinesPreMoonRock;
    int* mShinesPostMoonRock;
    int mAchievementShines;
    unsigned char gap25[0x8];
    bool bVar11;
    ChangeStageInfo* uVar4;
    ChangeStageInfo* uVar5;
    bool bVar12;
    bool bVar13;
    unsigned char gap26[0x6];
    int mWonRace;
    int mRaceRivalLevel;
    int mLastRaceRanking;
    void* gap27;
    ShopTalkData* mShopTalkData;
    void* gap28;
    bool mShowExplainCheckpointFlag;
    unsigned char gap29[0x8];
    sead::Vector3f mHomeTrans;
    bool mIsExistHome;
    sead::Vector3f mRaceStartNpcTrans;
    bool mIsExistRaceStartNpc;
    sead::Vector3f mRaceStartTrans;
    bool mIsExistRaceStart;
    sead::Vector3f mRaceGoalTrans;
    bool mIsExistRaceGoal;
    sead::Vector3f mHintNpcTrans;
    bool mIsExistHintNpc;
    sead::Vector3f vVar6;
    bool bVar19;
    sead::Vector3f mJangoTrans;
    bool mIsExistJango;
    sead::Vector3f mAmiiboNpcTrans;
    bool mIsExistAmiiboNpc;
    sead::Vector3f mTimeBalloonNpcTrans;
    bool mIsExistTimeBalloonNpc;
    sead::Vector3f mPoetterTrans;
    bool mIsExistPoetter;
    sead::Vector3f mMoonRockTrans;
    bool mIsExistMoonRock;
    sead::Vector3f vVar11;
    bool bVar25;
    void* gap30;
    unsigned char gap31[0x8];
    void* gap32;
    unsigned char gap33[0xc];
    bool bVar26;
    bool bVar27;
};
